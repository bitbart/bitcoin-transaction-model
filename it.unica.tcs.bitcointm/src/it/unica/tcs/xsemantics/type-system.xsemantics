/*
 * Copyright 2017 Nicola Atzei
 */

import it.unica.tcs.bitcoinTM.AddressType
import it.unica.tcs.bitcoinTM.AfterTimeLock
import it.unica.tcs.bitcoinTM.AndScriptExpression
import it.unica.tcs.bitcoinTM.Ask
import it.unica.tcs.bitcoinTM.Assert
import it.unica.tcs.bitcoinTM.BasicType
import it.unica.tcs.bitcoinTM.Between
import it.unica.tcs.bitcoinTM.BitcoinTMFactory
import it.unica.tcs.bitcoinTM.BooleanLiteral
import it.unica.tcs.bitcoinTM.BooleanType
import it.unica.tcs.bitcoinTM.Check
import it.unica.tcs.bitcoinTM.Choice
import it.unica.tcs.bitcoinTM.Compile
import it.unica.tcs.bitcoinTM.Confirmations
import it.unica.tcs.bitcoinTM.Constant
import it.unica.tcs.bitcoinTM.Declaration
import it.unica.tcs.bitcoinTM.DeclarationLeft
import it.unica.tcs.bitcoinTM.DeclarationRight
import it.unica.tcs.bitcoinTM.GetBalance
import it.unica.tcs.bitcoinTM.Hash160
import it.unica.tcs.bitcoinTM.Hash160Literal
import it.unica.tcs.bitcoinTM.Hash160Type
import it.unica.tcs.bitcoinTM.Hash256
import it.unica.tcs.bitcoinTM.Hash256Literal
import it.unica.tcs.bitcoinTM.Hash256Type
import it.unica.tcs.bitcoinTM.IfThenElse
import it.unica.tcs.bitcoinTM.Input
import it.unica.tcs.bitcoinTM.IntType
import it.unica.tcs.bitcoinTM.IsMined
import it.unica.tcs.bitcoinTM.KeyLiteral
import it.unica.tcs.bitcoinTM.KeyType
import it.unica.tcs.bitcoinTM.Max
import it.unica.tcs.bitcoinTM.Min
import it.unica.tcs.bitcoinTM.NumberLiteral
import it.unica.tcs.bitcoinTM.OrScriptExpression
import it.unica.tcs.bitcoinTM.Output
import it.unica.tcs.bitcoinTM.Parallel
import it.unica.tcs.bitcoinTM.Parameter
import it.unica.tcs.bitcoinTM.Participant
import it.unica.tcs.bitcoinTM.PermittedType
import it.unica.tcs.bitcoinTM.ProcessDeclaration
import it.unica.tcs.bitcoinTM.ProcessReference
import it.unica.tcs.bitcoinTM.ProtocolIfThenElse
import it.unica.tcs.bitcoinTM.ProtocolTransactionReference
import it.unica.tcs.bitcoinTM.Put
import it.unica.tcs.bitcoinTM.Receive
import it.unica.tcs.bitcoinTM.Reference
import it.unica.tcs.bitcoinTM.Regtest
import it.unica.tcs.bitcoinTM.Ripemd160
import it.unica.tcs.bitcoinTM.Ripemd160Literal
import it.unica.tcs.bitcoinTM.Ripemd160Type
import it.unica.tcs.bitcoinTM.ScriptArithmeticSigned
import it.unica.tcs.bitcoinTM.ScriptBooleanNegation
import it.unica.tcs.bitcoinTM.ScriptComparison
import it.unica.tcs.bitcoinTM.ScriptDiv
import it.unica.tcs.bitcoinTM.ScriptEquals
import it.unica.tcs.bitcoinTM.ScriptMinus
import it.unica.tcs.bitcoinTM.ScriptPlus
import it.unica.tcs.bitcoinTM.ScriptTimes
import it.unica.tcs.bitcoinTM.Send
import it.unica.tcs.bitcoinTM.Sha256
import it.unica.tcs.bitcoinTM.Sha256Literal
import it.unica.tcs.bitcoinTM.Sha256Type
import it.unica.tcs.bitcoinTM.Signature
import it.unica.tcs.bitcoinTM.SignatureType
import it.unica.tcs.bitcoinTM.Size
import it.unica.tcs.bitcoinTM.StringLiteral
import it.unica.tcs.bitcoinTM.StringType
import it.unica.tcs.bitcoinTM.Substitution
import it.unica.tcs.bitcoinTM.Tau
import it.unica.tcs.bitcoinTM.TransactionBody
import it.unica.tcs.bitcoinTM.TransactionDeclaration
import it.unica.tcs.bitcoinTM.TransactionLiteral
import it.unica.tcs.bitcoinTM.TransactionType
import it.unica.tcs.bitcoinTM.Type
import it.unica.tcs.bitcoinTM.TypeVariable
import it.unica.tcs.bitcoinTM.Typeable
import it.unica.tcs.bitcoinTM.Versig
import it.unica.tcs.validation.AbstractBitcoinTMValidator
import org.bitcoinj.core.Address
import org.bitcoinj.core.DumpedPrivateKey
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.util.EcoreUtil

system it.unica.tcs.xsemantics.BitcoinTMTypeSystem

validatorExtends AbstractBitcoinTMValidator

inject LambdaUtils lambdaUtils

auxiliary {
        
    typesubstitution(TypeSubstitutions substitutions, Type original) : Type
    
    unify(TypeSubstitutions substitutions, Type left, Type right) : Type
        error "Cannot unify " + stringRep(left) + " with " + stringRep(right)
    
    failIfTypeVariable(Type type, EObject obj)
    failIfNotBasic(Type type, EObject obj)
}

judgments {

	typeExpression |- TypeSubstitutions substitutions |> Typeable exp : output Type
		error "Cannot type " + stringRep(exp)
		source exp
}

/*
 * auxiliary functions
 */

auxiliary failIfTypeVariable(Type type, EObject obj) {
	if (type instanceof TypeVariable) {
		fail
		error "Cannot infer the type"
		source obj
	} else {
		// type is basic, set within the AST
		if (obj instanceof DeclarationLeft) {
			obj.type = type
		}
	}
}

auxiliary failIfNotBasic(Type type, EObject obj) {
	if (!(type instanceof BasicType)) {
		fail
		error "Basic type expected: int, string, bool, hash160, hash256, ripemd160, sha256"
		source obj
	} else {
		// type is basic, set within the AST
		if (obj instanceof DeclarationLeft) {
			obj.type = type
		}
	}
}

auxiliary typesubstitution(TypeSubstitutions substitutions, Type type) {
    type
}

auxiliary typesubstitution(TypeSubstitutions substitutions, TypeVariable variable)
{
    var mapped = substitutions.mapped(variable.value)
    if (mapped !== null) {
        val result = EcoreUtil::copy(mapped)
        typesubstitution(substitutions, result) // recursive
    } else
        variable
}

auxiliary unify(TypeSubstitutions substitutions, Type t1, Type t2) {
    // if we get here we cannot unify the two types
    fail
	error "Cannot unify type "+t1+" with type "+t2
	null
} 

auxiliary unify(TypeSubstitutions substitutions, IntType t1, IntType t2) {
    EcoreUtil::copy(t1)
}

auxiliary unify(TypeSubstitutions substitutions, Hash160Type t1, Hash160Type t2) {
    EcoreUtil::copy(t1)
}

auxiliary unify(TypeSubstitutions substitutions, Hash256Type t1, Hash256Type t2) {
    EcoreUtil::copy(t1)
}

auxiliary unify(TypeSubstitutions substitutions, Ripemd160Type t1, Ripemd160Type t2) {
    EcoreUtil::copy(t1)
}

auxiliary unify(TypeSubstitutions substitutions, Sha256Type t1, Sha256Type t2) {
    EcoreUtil::copy(t1)
}

auxiliary unify(TypeSubstitutions substitutions, StringType t1, StringType t2) {
    EcoreUtil::copy(t1)
}

auxiliary unify(TypeSubstitutions substitutions, BooleanType t1, BooleanType t2) {
    EcoreUtil::copy(t1)
}

auxiliary unify(TypeSubstitutions substitutions, KeyType t1, KeyType t2) {
    EcoreUtil::copy(t1)
}

auxiliary unify(TypeSubstitutions substitutions, AddressType t1, AddressType t2) {
    EcoreUtil::copy(t1)
}

auxiliary unify(TypeSubstitutions substitutions, SignatureType t1, SignatureType t2) {
    EcoreUtil::copy(t1)
}

auxiliary unify(TypeSubstitutions substitutions, TransactionType t1, TransactionType t2) {
    EcoreUtil::copy(t1)
}

auxiliary unify(TypeSubstitutions substitutions, TypeVariable typeVar, PermittedType basicType) {
    substitutions.add(typeVar.value, basicType)
    EcoreUtil.copy(basicType)
}

auxiliary unify(TypeSubstitutions substitutions, PermittedType basicType, TypeVariable typeVar) {
    unify(substitutions, typeVar, basicType)
}

auxiliary unify(TypeSubstitutions substitutions, TypeVariable left, TypeVariable right) {
    // unify both variables with a fresh new variable
    val fresh = lambdaUtils.createFreshTypeVariable
    substitutions.add(left.value, fresh)
    substitutions.add(right.value, fresh)
    fresh
}

// hash256 is a sha256
auxiliary unify(TypeSubstitutions substitutions, Hash256Type t1, Sha256Type t2) {
    EcoreUtil::copy(t2)		
}

// hash256 is a sha256
auxiliary unify(TypeSubstitutions substitutions, Sha256Type t1, Hash256Type t2) {
    EcoreUtil::copy(t1)
}

// hash160 is a sha256
auxiliary unify(TypeSubstitutions substitutions, Hash160Type t1, Ripemd160Type t2) {
    EcoreUtil::copy(t2)
}

// hash160 is a sha256
auxiliary unify(TypeSubstitutions substitutions, Ripemd160Type t1, Hash160Type t2) {
    EcoreUtil::copy(t1)
}

// key is subtype of address: you can derive an address from its private part
auxiliary unify(TypeSubstitutions substitutions, KeyType t1, AddressType t2) {
    EcoreUtil::copy(t2)
}



/*
 * Type system rules
 */

rule Parameter
	G |- TypeSubstitutions substitutions |> Parameter p : Type type
from {
	{
		p.type !== null
		type = EcoreUtil.copy(p.type)
	}
	or {
		type = lambdaUtils.createFreshTypeVariable
	}
	G.add(p, type)
}

rule Constant
	G |- TypeSubstitutions substitutions |> Constant c : Type type
from {
	{
		c.type !== null
		type = EcoreUtil.copy(c.type)
	}
	or {
		type = lambdaUtils.createFreshTypeVariable
	}
	
	G |- substitutions |> c.exp : var Type expType
	type = unify(substitutions, expType, type)
	
	failIfTypeVariable(type, c)
	c.type = type	// store the type in the AST
}

rule Declaration
	G |- TypeSubstitutions substitutions |> Declaration decl : Type type
from {
	G |- substitutions |> decl.left : var Type leftType
	G |- substitutions |> decl.right : var Type rightType
	
	leftType = typesubstitution(substitutions, leftType)
	rightType = typesubstitution(substitutions, rightType)
	
	// right part is unifiable with left one, the result is the type of the declaration
	type = unify(substitutions, leftType, rightType)
	
	
	// all the parameters should have a basic type (generic types are not allowed)
	for (p : decl.left.params) {
		var ptype = env(G, p, Type)
		ptype = typesubstitution(substitutions, ptype)
		failIfTypeVariable(ptype, p)
		p.type = ptype		// store the type in the AST
	}
	
	failIfTypeVariable(type, decl.left)
	decl.left.type = type	// store the type in the AST
}

rule DeclarationLeft
	G |- TypeSubstitutions substitutions |> DeclarationLeft d : Type type
from {
	// type all the formal parameters
	for (param : d.params) {
		G |- substitutions |> param : var Type paramType
	}

	{
		d.type !== null
		type = EcoreUtil.copy(d.type)
	}
	or {
		type = lambdaUtils.createFreshTypeVariable
	}
}

rule DeclarationRight
	G |- TypeSubstitutions substitutions |> DeclarationRight p : Type type
from {
	G |- substitutions |> p.value : type
}

rule Reference
	G |- TypeSubstitutions substitutions |> Reference varRef : Type type
from {
	
	if (varRef.ref instanceof Constant) {
		val const = varRef.ref as Constant
		G |- substitutions |> const : type
	}
	else if (varRef.ref instanceof Parameter) {
		val param = varRef.ref as Parameter
		G |- substitutions |> param : type
	}
	else if (varRef.ref instanceof DeclarationLeft) {
		val ref = varRef.ref as DeclarationLeft
		G |- substitutions |> ref : type
		type = typesubstitution(substitutions, type)
		
		if (varRef.actualParams.size != ref.params.size) {
			fail 
				error "Invalid number of actual parameters."
				source varRef
		}
		
		// check the actual parameters type match the formal ones
		for (var i=0; i<varRef.actualParams.size; i++) {
			var actualParam = varRef.actualParams.get(i)
			var formalParam = ref.params.get(i)
			
			// get formal parameter type
			var formalParamType = env(G, formalParam, Type)
			// apply eventual substitutions to get the basic type
			formalParamType = typesubstitution(substitutions, formalParamType)
			// ensure it's basic
			failIfTypeVariable(formalParamType, formalParam)
			
			// all the actual parameters are well typed
			G |- substitutions |> actualParam : var Type actualParamType
			// apply eventual substitutions
			actualParamType = typesubstitution(substitutions, actualParamType)
			
			// the actual param type must be unifiable with the formal param type
			unify(substitutions, actualParamType, formalParamType)
		}
	}
}

/*
 * - all the inputs are well typed
 * - all the outputs are well typed
 */
rule TransactionBody
	G |- TypeSubstitutions substitutions |> TransactionBody body : BitcoinTMFactory::eINSTANCE.createTransactionType
from {
	
	for (in : body.inputs) {
		G |- substitutions |> in : var Type t1	// all inputs are well typed
	}
	
	for (out : body.outputs) {
		G |- substitutions |> out : var Type t2	// all outputs are well typed
	}
}


/**
 * An input is well typed if:
 * - the body of the redeemed transaction is well typed
 * - all the expressions are well typed and the type is basic (not generic)
 * - if the redeemed tx has free variables, check that the actual types corresponds to the formal ones 
 * - if the redeemed tx is user defined, all the expression type corresponds to the expected type of the parameter
 */
rule Input
	G |- TypeSubstitutions substitutions |> Input input : Type t
from {
	
	if (!input.isPlaceholder) {
		
		val txType = BitcoinTMFactory::eINSTANCE.createTransactionType
		
		// the body of the redeemed transaction is well typed
		G |- substitutions |> input.txRef : var Type t1		// eventual tx parameters have type BasicType
		t1 = typesubstitution(substitutions, t1)
		unify(substitutions, t1, txType)
		
		{
			// all the input expressions are well typed and the type is basic
			for (var i=0; i<input.exps.size; i++) {
				var exp = input.exps.get(i)
				G |- substitutions |> exp : var Type texp	// type can be inferred by the "invocation" of inputTx
				texp = typesubstitution(substitutions, texp)
				failIfTypeVariable(texp, exp)
			}
		} or {
			/*
			 * input.txRef can be
			 * - a transaction reference (serial or not)
			 * - an expression which evaluate to a transaction literal
			 */
			val inputTxRef = input.txRef
			
			if (inputTxRef instanceof Reference) {
				
				var inputTx = inputTxRef.eContainer as TransactionDeclaration
		
				// check the actual parameters type match the formal ones (Transaction)
				for (var i=0; i<inputTxRef.actualParams.size; i++) {
					var actualParam = inputTxRef.actualParams.get(i)
					var formalParam = inputTx.left.params.get(i)
					
					// get formal parameter type
					var formalParamType = env(G, formalParam, Type)
					// apply eventual substitutions to get the basic type
					formalParamType = typesubstitution(substitutions, formalParamType)
					// ensure it's basic
					failIfTypeVariable(formalParamType, formalParam)
					
					// all the actual parameters are well typed
					G |- substitutions |> actualParam : var Type actualParamType
					// apply eventual substitutions
					actualParamType = typesubstitution(substitutions, actualParamType)
					
					// the actual param type must be unifiable with the formal param type
					unify(substitutions, actualParamType, formalParamType)
				}
				
				// check the actual parameters type match the formal ones (Script)
				var outputIndex = input.outpoint
				var outputScript = (inputTx.right.value as TransactionBody).outputs.get(new Long(outputIndex).intValue).script
				for (var i=0; i<input.exps.size; i++) {
					var inputExp = input.exps.get(i)
					var outputParam = outputScript.params.get(i)
					
					// get formal parameter type
					var formalParamType = env(G, outputParam, Type)
					// apply eventual substitutions to get the basic type
					formalParamType = typesubstitution(substitutions, formalParamType)
					// ensure it's basic
					failIfTypeVariable(formalParamType, outputParam)
					
					// all the actual parameters are well typed
					G |- substitutions |> inputExp : var Type actualParamType
					// apply eventual substitutions
					actualParamType = typesubstitution(substitutions, actualParamType)
					
					// the actual param type must be unifiable with the formal param type
					unify(substitutions, actualParamType, formalParamType)
				}
			}
		}
	}
}

/**
 * An Output is well typed if:
 * - all the scripts parameters are well typed and the type is basic (not generic)
 * - all the scripts expressions are well typed
 */
rule Output
	G |- TypeSubstitutions substitutions |> Output _output : Type t
from {
	var satoshis = _output.value.exp
	G |- new TypeSubstitutions() |> satoshis : var IntType intType
	
	var script = _output.script
	for (p : script.params) {
		G |- substitutions |> p : var Type type
	}


	G |- substitutions |> script.exp : var Type scriptType
	scriptType = typesubstitution(substitutions, scriptType)	
	{
		unify(substitutions, scriptType, BitcoinTMFactory::eINSTANCE.createBooleanType)
	} or {
		unify(substitutions, scriptType, BitcoinTMFactory::eINSTANCE.createStringType)
	}
	
	// all the parameters should have a basic type (generic types are not allowed)
	for (p : script.params) {
		var ptype = env(G, p, Type)
		ptype = typesubstitution(substitutions, ptype)
		failIfTypeVariable(ptype, p)
		p.type = ptype
	}
}





/*
 * Expressions type system
 */
axiom NumeralLiteral
	G |- TypeSubstitutions substitutions |> NumberLiteral num : BitcoinTMFactory::eINSTANCE.createIntType

axiom BooleanLiteral
	G |- TypeSubstitutions substitutions |> BooleanLiteral bool : BitcoinTMFactory::eINSTANCE.createBooleanType

axiom StringLiteral
	G |- TypeSubstitutions substitutions |> StringLiteral str : BitcoinTMFactory::eINSTANCE.createStringType

axiom Hash160Literal
	G |- TypeSubstitutions substitutions |> Hash160Literal h : BitcoinTMFactory::eINSTANCE.createHash160Type

axiom Hash256Literal
	G |- TypeSubstitutions substitutions |> Hash256Literal h : BitcoinTMFactory::eINSTANCE.createHash256Type

axiom Ripemd160Literal
	G |- TypeSubstitutions substitutions |> Ripemd160Literal h : BitcoinTMFactory::eINSTANCE.createRipemd160Type

axiom Sha256Literal
	G |- TypeSubstitutions substitutions |> Sha256Literal h : BitcoinTMFactory::eINSTANCE.createSha256Type

axiom TransactionLiteral
	G |- TypeSubstitutions substitutions |> TransactionLiteral tx : BitcoinTMFactory::eINSTANCE.createTransactionType

rule KeyLiteral
	G |- TypeSubstitutions substitutions |> KeyLiteral key : Type res
from {
	{
		DumpedPrivateKey.fromBase58(null, key.value);
		res = BitcoinTMFactory::eINSTANCE.createKeyType
	} or {
		Address.fromBase58(null, key.value);
		res = BitcoinTMFactory::eINSTANCE.createAddressType	
	}
}
	

rule Substitution
    G |- TypeSubstitutions substitutions |> Substitution cmd : BitcoinTMFactory::eINSTANCE.createTransactionType
from {
	val txType = BitcoinTMFactory::eINSTANCE.createTransactionType
	
	G |- substitutions |> cmd.left: var Type type
	G |- substitutions |> cmd.right: var Type typeS

	type = typesubstitution(substitutions, type)
	typeS = typesubstitution(substitutions, typeS)
	
	unify(substitutions, type, txType)
	unify(substitutions, typeS, txType)
}

rule ScriptTimes
	G |- TypeSubstitutions substitutions |> ScriptTimes minus : IntType t
from {
	t = BitcoinTMFactory::eINSTANCE.createIntType
	G |- substitutions |> minus.left: var Type leftType
	G |- substitutions |> minus.right: var Type rightType
	
	leftType = typesubstitution(substitutions, leftType)
	rightType = typesubstitution(substitutions, rightType)
	
	// the terms type must be unifiable with int type
	unify(substitutions, leftType, t)
	unify(substitutions, rightType, t)
}

rule ScriptDiv
	G |- TypeSubstitutions substitutions |> ScriptDiv minus : IntType t
from {
	t = BitcoinTMFactory::eINSTANCE.createIntType
	G |- substitutions |> minus.left: var Type leftType
	G |- substitutions |> minus.right: var Type rightType
	
	leftType = typesubstitution(substitutions, leftType)
	rightType = typesubstitution(substitutions, rightType)
	
	// the terms type must be unifiable with int type
	unify(substitutions, leftType, t)
	unify(substitutions, rightType, t)
}

rule Minus
	G |- TypeSubstitutions substitutions |> ScriptMinus minus : IntType t
from {
	t = BitcoinTMFactory::eINSTANCE.createIntType
	G |- substitutions |> minus.left: var Type leftType
	G |- substitutions |> minus.right: var Type rightType
	
	leftType = typesubstitution(substitutions, leftType)
	rightType = typesubstitution(substitutions, rightType)
	
	// the terms type must be unifiable with int type
	unify(substitutions, leftType, t)
	unify(substitutions, rightType, t)
}

rule Plus
    G |- TypeSubstitutions substitutions |> ScriptPlus plus : Type type
from {
    G |- substitutions |> plus.left : var Type leftType
    G |- substitutions |> plus.right : var Type rightType
	
	leftType = typesubstitution(substitutions, leftType)
	rightType = typesubstitution(substitutions, rightType)
	
    {
       	type = BitcoinTMFactory::eINSTANCE.createIntType
		// the terms type must be unifiable with int type
		unify(substitutions, leftType, type)
		unify(substitutions, rightType, type)
	}
    or
    {
    	type = BitcoinTMFactory::eINSTANCE.createStringType
		// the terms type must be unifiable with string type
		unify(substitutions, leftType, type)
		unify(substitutions, rightType, type)
    }
}

rule Comparison
	G |- TypeSubstitutions substitutions |> ScriptComparison comparison : BitcoinTMFactory::eINSTANCE.createBooleanType
from {
	var t = BitcoinTMFactory::eINSTANCE.createIntType
	G |- substitutions |> comparison.left : var Type leftType
	G |- substitutions |> comparison.right : var Type rightType
	
	leftType = typesubstitution(substitutions, leftType)
	rightType = typesubstitution(substitutions, rightType)
	
	unify(substitutions, leftType, t)
	unify(substitutions, rightType, t)
}

rule Equals
	G |- TypeSubstitutions substitutions |> ScriptEquals comparison : BitcoinTMFactory::eINSTANCE.createBooleanType
from {
	G |- substitutions |> comparison.left : var Type leftType
	G |- substitutions |> comparison.right : var Type rightType
	
	leftType = typesubstitution(substitutions, leftType)
	rightType = typesubstitution(substitutions, rightType)
	
	// equals between elements of the same type
	unify(substitutions, leftType, rightType)
}

rule BooleanNegation
	G |- TypeSubstitutions substitutions |> ScriptBooleanNegation negation : BooleanType boolType
from {
	boolType = BitcoinTMFactory::eINSTANCE.createBooleanType
	G |- substitutions |> negation.exp : var Type t
	
	t = typesubstitution(substitutions, t)
	
	unify(substitutions, t, boolType)
}

rule Or
	G |- TypeSubstitutions substitutions |> OrScriptExpression orExp : BooleanType boolType
from {
	boolType = BitcoinTMFactory::eINSTANCE.createBooleanType
	G |- substitutions |> orExp.left : var Type leftType
	G |- substitutions |> orExp.right : var Type rightType
	
	leftType = typesubstitution(substitutions, leftType)
	rightType = typesubstitution(substitutions, rightType)
	
	unify(substitutions, leftType, boolType)
	unify(substitutions, rightType, boolType)
}

rule And
	G |- TypeSubstitutions substitutions |> AndScriptExpression andExp : BooleanType boolType
from {
	boolType = BitcoinTMFactory::eINSTANCE.createBooleanType
	G |- substitutions |> andExp.left : var Type leftType
	G |- substitutions |> andExp.right : var Type rightType
	
	leftType = typesubstitution(substitutions, leftType)
	rightType = typesubstitution(substitutions, rightType)
	
	unify(substitutions, leftType, boolType)
	unify(substitutions, rightType, boolType)
}

rule ArithmeticSigned
	G |- TypeSubstitutions substitutions |> ScriptArithmeticSigned signed : IntType intType
from {
	intType = BitcoinTMFactory::eINSTANCE.createIntType
	G |- substitutions |> signed.exp : var Type t
	
	t = typesubstitution(substitutions, t)
	
	unify(substitutions, t, intType)
}

rule IfThenElse
	G |- TypeSubstitutions substitutions |> IfThenElse stmt : Type type
from {
	var boolType = BitcoinTMFactory::eINSTANCE.createBooleanType
	G |- substitutions |> stmt.^if: var Type tIf
	G |- substitutions |> stmt.then: var Type tThen
	
	tIf = typesubstitution(substitutions, tIf)
	tThen = typesubstitution(substitutions, tThen)
	
	unify(substitutions, tIf, boolType)

	G |- substitutions |> stmt.^else: var Type tElse
	tElse = typesubstitution(substitutions, tElse)
	unify(substitutions, tThen, tElse)
	
	type=tThen
}

rule VerSig
	G |- TypeSubstitutions substitutions |> Versig versig : BitcoinTMFactory::eINSTANCE.createBooleanType
from {
	var addrType = BitcoinTMFactory::eINSTANCE.createAddressType
	
	for (k : versig.pubkeys) {
		G |- substitutions |> k : var Type t
		t = typesubstitution(substitutions, t)
		unify(substitutions, t, addrType)
	}

	var sigType = BitcoinTMFactory::eINSTANCE.createSignatureType
	
	for (s : versig.signatures) {
		G |- substitutions |> s : var Type ts
		ts = typesubstitution(substitutions, ts)
		unify(substitutions, ts, sigType)
	}
}

rule Signature
	G |- TypeSubstitutions substitutions |> Signature s : BitcoinTMFactory::eINSTANCE.createSignatureType
from {
	var keyType = BitcoinTMFactory::eINSTANCE.createKeyType

	G |- substitutions |> s.key : var Type t
	t = typesubstitution(substitutions, t)
	unify(substitutions, t, keyType)
}

rule Hash160
	G |- TypeSubstitutions substitutions |> Hash160 hash: BitcoinTMFactory::eINSTANCE.createHash160Type
from {
	G |- substitutions |> hash.value: var Type t
	t = typesubstitution(substitutions, t)
	
	failIfNotBasic(t, hash)
}

rule Hash256
	G |- TypeSubstitutions substitutions |> Hash256 hash: BitcoinTMFactory::eINSTANCE.createHash256Type
from {
	G |- substitutions |> hash.value: var Type t
	t = typesubstitution(substitutions, t)
	
	failIfNotBasic(t, hash)
}

rule Ripemd160
	G |- TypeSubstitutions substitutions |> Ripemd160 hash: BitcoinTMFactory::eINSTANCE.createRipemd160Type
from {
	G |- substitutions |> hash.value: var Type t
	t = typesubstitution(substitutions, t)
	
	failIfNotBasic(t, hash)
}

rule Sha256
	G |- TypeSubstitutions substitutions |> Sha256 hash: BitcoinTMFactory::eINSTANCE.createSha256Type
from {
	G |- substitutions |> hash.value: var Type t
	t = typesubstitution(substitutions, t)
	
	failIfNotBasic(t, hash)
}

rule Min
	G |- TypeSubstitutions substitutions |> Min min: IntType t
from {
	t = BitcoinTMFactory::eINSTANCE.createIntType
	G |- substitutions |> min.left: var Type tleft
	G |- substitutions |> min.right: var Type tright
	
	tleft = typesubstitution(substitutions, tleft)
	tright = typesubstitution(substitutions, tright)
	
	unify(substitutions, tleft, t)
	unify(substitutions, tright, t)
}

rule Max
	G |- TypeSubstitutions substitutions |> Max max: IntType t
from {
	t = BitcoinTMFactory::eINSTANCE.createIntType
	G |- substitutions |> max.left: var Type tleft
	G |- substitutions |> max.right: var Type tright
	
	tleft = typesubstitution(substitutions, tleft)
	tright = typesubstitution(substitutions, tright)
	
	unify(substitutions, tleft, t)
	unify(substitutions, tright, t)
}

rule Between
	G |- TypeSubstitutions substitutions |> Between between: IntType t
from {
	t = BitcoinTMFactory::eINSTANCE.createIntType
	G |- substitutions |> between.value: var Type tValue
	G |- substitutions |> between.left: var Type tLeft
	G |- substitutions |> between.right: var Type tRight
	
	tValue = typesubstitution(substitutions, tValue)
	tLeft = typesubstitution(substitutions, tLeft)
	tRight = typesubstitution(substitutions, tRight)
	
	unify(substitutions, tValue, t)
	unify(substitutions, tLeft, t)
	unify(substitutions, tRight, t)
}

rule Size
	G |- TypeSubstitutions substitutions |> Size size: BitcoinTMFactory::eINSTANCE.createIntType
from {
	G |- substitutions |> size.value: var Type t
	
	t = typesubstitution(substitutions, t)
}

rule AfterTimeLock
	G |- TypeSubstitutions substitutions |> AfterTimeLock after: Type texpr
from {
	G |- substitutions |> after.continuation: texpr
	texpr = typesubstitution(substitutions, texpr)
}

/*
 * Protocols/Processes
 */
rule Participant
	G |- TypeSubstitutions substitutions |> Participant p : Type t
from {
	for (v : p.variables) {
		G |- substitutions |> v : t	
	}
	
	for (d : p.defs) {
		G |- substitutions |> d : t	
	}
	
	G |- substitutions |> p.process : t
}

rule ProcessDeclaration
	G |- TypeSubstitutions substitutions |> ProcessDeclaration p : Type t
from {
	for (param : p.params) {
		G |- substitutions |> param : var Type type
		G.add(param, type)			// store the type in the environment 
	}

	// process is well typed
	G |- substitutions |> p.process : t
	
	// all the parameters should have a basic type (generic types are not allowed)
	for (param : p.params) {
		// get formal parameter type
		var formalParamType = env(G, param, Type)
		// apply eventual substitutions to get the basic type
		formalParamType = typesubstitution(substitutions, formalParamType)
		// ensure it's basic
		failIfNotBasic(formalParamType, param)
	}
}
 
rule Choice
	G |- TypeSubstitutions substitutions |> Choice choice : Type type
from {
	for (a : choice.actions) {
		G |- substitutions |> a : var Type t
		if (a.next!==null) {
			G |- substitutions |> a.next : var Type t1
		}
	}
}

rule Parallel
	G |- TypeSubstitutions substitutions |> Parallel p : Type type
from {
	G |- substitutions |> p.left : var Type t
	G |- substitutions |> p.right : var Type t1
}

rule ProcessReference
	G |- TypeSubstitutions substitutions |> ProcessReference pRef : Type type
from {
	// check the actual parameters type match the formal ones (Transaction)
	for (var i=0; i<pRef.actualParams.size; i++) {
		var actualParam = pRef.actualParams.get(i)
		var formalParam = pRef.ref.params.get(i)

		// get formal parameter type
		var formalParamType = env(G, formalParam, Type)
		// apply eventual substitutions to get the basic type
		formalParamType = typesubstitution(substitutions, formalParamType)
		// ensure it's basic
		failIfNotBasic(formalParamType, formalParam)

		// all the actual parameters are well type and the type is basic
		G |- substitutions |> actualParam : var Type actualParamType
		
		// the actual param type must be unifiable with the formal param type
		unify(substitutions, actualParamType, formalParamType)
	}
}

rule ProtocolIfThenElse
	G |- TypeSubstitutions substitutions |> ProtocolIfThenElse ifThenElse : Type type
from {
	G |- substitutions |> ifThenElse.exp : var Type t
	t = typesubstitution(substitutions, t)
	unify(substitutions, t, BitcoinTMFactory::eINSTANCE.createBooleanType)
	
	G |- substitutions |> ifThenElse.^then : var Type t1
	if (ifThenElse.^else!==null) {
		G |- substitutions |> ifThenElse.^else : var Type t2
	}
}

rule Tau
	G |- TypeSubstitutions substitutions |> Tau tau : Type type
from {}

rule Ask
	G |- TypeSubstitutions substitutions |> Ask ask : Type type
from {
	for (txRef : ask.txRefs) {
		G |- substitutions |> txRef : var Type t
		t = typesubstitution(substitutions, t)
	}
}

rule Put
	G |- TypeSubstitutions substitutions |> Put put : Type type
from {
	for (txRef : put.txRefs) {
		G |- substitutions |> txRef : var Type t
	}
}

rule Check
	G |- TypeSubstitutions substitutions |> Check a : Type type
from {
	G |- substitutions |> a.exp : var Type t
	t = typesubstitution(substitutions, t)
	unify(substitutions, t, BitcoinTMFactory::eINSTANCE.createBooleanType)
}

rule Send
	G |- TypeSubstitutions substitutions |> Send send : Type type
from {
	G |- substitutions |> send.message : var BasicType t
}

rule Receive
	G |- TypeSubstitutions substitutions |> Receive receive : Type type
from {
	G |- substitutions |> receive.^var : var BasicType t
}


/*
 * ProtocolExpressions
 */
//rule SignOp
//    G |- TypeSubstitutions substitutions |> SignOp sig : BitcoinTMFactory::eINSTANCE.createSignatureType
//from {
//	G |- substitutions |> sig.tx : var Type t
//	t = typesubstitution(substitutions, t)
//	unify(substitutions, t, BitcoinTMFactory::eINSTANCE.createTransactionType)
//}
//
//rule VersigOp	// same as before, but check for transaction to be well-typed
//	G |- TypeSubstitutions substitutions |> VersigOp versig : BitcoinTMFactory::eINSTANCE.createBooleanType
//from {
//	G |- substitutions |> versig.tx : var TransactionType t
//	
//	var sigType = BitcoinTMFactory::eINSTANCE.createSignatureType
//	
//	for (s : versig.signatures) {
//		G |- substitutions |> s : var Type t1
//		t1 = typesubstitution(substitutions, t1)
//		unify(substitutions, t1, sigType)
//	}
//}

rule ProtocolTransactionReference
    G |- TypeSubstitutions substitutions |> ProtocolTransactionReference txRef : Type t
from {
	if (txRef.substitution!==null) {
		G |- substitutions |> txRef.substitution: var Type t1
	}
}

/*
 * Instructions
 */
 
rule Regtest
    G |- TypeSubstitutions substitutions |> Regtest reg : BitcoinTMFactory::eINSTANCE.createVoidType
from {
	for (i : reg.intructions) {
		G |- substitutions |> i: var Type type
	}
}
 
rule Assert
    G |- TypeSubstitutions substitutions |> Assert cmd : BitcoinTMFactory::eINSTANCE.createVoidType
from {
	val boolType = BitcoinTMFactory::eINSTANCE.createBooleanType
	
	G |- substitutions |> cmd.exp: var Type type
	type = typesubstitution(substitutions, type)
	unify(substitutions, type, boolType)
}
 
rule Confirmations
    G |- TypeSubstitutions substitutions |> Confirmations cmd : BitcoinTMFactory::eINSTANCE.createIntType
from {
	val txType = BitcoinTMFactory::eINSTANCE.createTransactionType
	
	G |- substitutions |> cmd.exp: var Type type
	type = typesubstitution(substitutions, type)
	unify(substitutions, type, txType)
}

rule GetBalance
    G |- TypeSubstitutions substitutions |> GetBalance cmd : BitcoinTMFactory::eINSTANCE.createIntType
from {
	val keyType = BitcoinTMFactory::eINSTANCE.createKeyType
	
	G |- substitutions |> cmd.exp: var Type type
	type = typesubstitution(substitutions, type)
	unify(substitutions, type, keyType)
}

rule IsMined
    G |- TypeSubstitutions substitutions |> IsMined cmd : BitcoinTMFactory::eINSTANCE.createBooleanType
from {
	val txType = BitcoinTMFactory::eINSTANCE.createTransactionType
	
	G |- substitutions |> cmd.exp: var Type type
	type = typesubstitution(substitutions, type)
	unify(substitutions, type, txType)
}


rule Compile
    G |- TypeSubstitutions substitutions |> Compile cmd : BitcoinTMFactory::eINSTANCE.createVoidType
from {
	val txType = BitcoinTMFactory::eINSTANCE.createTransactionType
	
	for (tx : cmd.txs) {
		G |- substitutions |> tx: var Type type
		type = typesubstitution(substitutions, type)
		unify(substitutions, type, txType)
	}
}


//rule TypeCheckModel
//	G |- TypeSubstitutions substitutions |> Model model : BitcoinTMFactory::eINSTANCE.createTransactionType
//from {
//
////	for (p: EcoreUtil2.getAllContentsOfType(model, Constant)) {
////	    G |- substitutions |> p: var Type t
////	}
//
//	for (p: EcoreUtil2.getAllContentsOfType(model, Participant)) {
//	    G |- substitutions |> p: var Type t
//	}
//	
//	for (p: EcoreUtil2.getAllContentsOfType(model, Declaration)) {
//	    G |- substitutions |> p: var Type t
//	}
//	
//	for (p: EcoreUtil2.getAllContentsOfType(model, Regtest)) {
//	    G |- substitutions |> p: var Type t
//	}
//	
//	for (p: EcoreUtil2.getAllContentsOfType(model, Compile)) {
//	    G |- substitutions |> p: var Type t
//	}
//}
	

/*
 * 
 * rule invocations
 * 
 */
//checkrule CheckModel for
//    Model stmt
//from {
//	lambdaUtils.resetCounter
//    empty |- new TypeSubstitutions |> stmt: var Type t
//}

checkrule CheckConstants for
    Constant stmt
from {
	lambdaUtils.resetCounter
    empty |- new TypeSubstitutions |> stmt: var Type t
}

checkrule CheckTransactions for
    TransactionDeclaration stmt
from {
	lambdaUtils.resetCounter
    empty |- new TypeSubstitutions |> stmt: var Type t
}

checkrule CheckParticipant for
    Participant stmt
from {
	lambdaUtils.resetCounter
    empty |- new TypeSubstitutions |> stmt: var Type t
}

checkrule CheckCompile for
    Compile stmt
from {
	lambdaUtils.resetCounter
    empty |- new TypeSubstitutions |> stmt: var Type t
}
