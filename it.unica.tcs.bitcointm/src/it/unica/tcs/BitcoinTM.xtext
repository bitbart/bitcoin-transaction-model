/*
 * Copyright 2017 Nicola Atzei
 */

grammar it.unica.tcs.BitcoinTM with org.eclipse.xtext.common.Terminals

generate bitcoinTM "http://www.unica.it/tcs/BitcoinTM"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
    
Model:
	package=PackageDeclaration?
//	imports+=Import*
	net=Network?
	declarations+=Element*
	compile=Compile?
;

PackageDeclaration:
    'package' name=QualifiedName;

QualifiedName: ID ('.' ID)*;

Import:
    'import' importedNamespace=QualifiedNameWithWildcard;
    
QualifiedNameWithWildcard:
    QualifiedName '.*'?;

Element: 
  Constant |
  TransactionDeclaration |
  "participant" Participant; 

Network: {Network} "network" (testnet?="testnet" | mainnet?="mainnet" | regtest?="regtest");

Server: "server" "{"
	"address" ":" STRING
	"port" ":" LONG
	"user" ":" STRING
	("password" ":" STRING)?
	("timeout" ":" LONG)?
"}";

/*
 * generic declarations
 */

Declaration:
	"let" left=DeclarationLeft "=" right=DeclarationRight;

DeclarationLeft:
	name=ID 
	("(" (params+=Parameter ("," params+=Parameter)*)? ")")?
	(":" type=DeclarationType)?;
	
DeclarationLeftNoType returns DeclarationLeft:	// same as DeclarationLeft, but does not permit type
	name=ID
	("(" (params+=Parameter ("," params+=Parameter)*)? ")")?;

Parameter:
	name=ID 
	(":" type=DeclarationType)?;	// name (: type)?

DeclarationRight:
	value=Expression;

Referrable:
	Parameter | DeclarationLeft | Constant;

/*
 * transactions (special case of Declaration)
 */
 
Constant:
	"const" name=ID (":" type=DeclarationType)? "=" exp=Expression;

TransactionDeclaration returns Declaration:
	{TransactionDeclaration}
	checks+=OnDemandCheck*
	"transaction"  left=DeclarationLeftNoType right=DeclarationRightTx;

DeclarationRightTx returns DeclarationRight:
	value=TransactionBody;

TransactionBody returns ScriptExpression: {TransactionBody} "{"
	("input"  "=" (inputs+=(Input|InputPlaceholder)  | (isMultiIn?="["  inputs+=Input   (";" inputs+=Input)*   "]") ))?
	("output" "=" (outputs+=Output| (isMultiOut?="[" outputs+=Output (";" outputs+=Output)* "]") ))?
	("after" tlock=Tlock)?
"}";

Input:
	txRef=Expression ("@" outpoint=LONG)? ":" exps+=ScriptAtomic+ ("["redeemScript=Script"]")?;

InputPlaceholder returns Input:
	placeholder?="_";

Output:
	value=BitcoinValue ":" script=Script;

BitcoinValue:
	exp=ScriptExpression;

Tlock: times+=Time ("&&" times+=Time)*;

Time: AbsoluteTime | RelativeTime
;

AbsoluteTime:
	block?="block" value=LONG | date?="date" value=TIMESTAMP;

RelativeTime:
	value=Delay "from" tx=[DeclarationLeft|QualifiedName];

Script:
	(lambda?="fun"  "(" (params+=Parameter ("," params+=Parameter)*)? ")" ".")? exp=ScriptExpression;


/* on-demand checks */
OnDemandCheck:
	IsMinedCheck
|	IsNotMinedCheck;

IsMinedCheck: {IsMinedCheck} mined?="@isMined";
IsNotMinedCheck: {IsMinedCheck} "@isNotMined";


/*
 * script expressions
 */
ExpressionI:            /* just to force some hierarchy and resolve ambiguity */
	"ε" ScriptExpression | "η" Expression;

Expression:
    ScriptExpression;

ScriptExpression:
    OrScriptExpression;

OrScriptExpression returns ScriptExpression:
	AndScriptExpression (({OrScriptExpression.left=current} => '||' ) right=AndScriptExpression)*;

AndScriptExpression returns ScriptExpression:
	ScriptComparison (({AndScriptExpression.left=current} '&&') right=ScriptComparison)*;

ScriptComparison returns ScriptExpression:
	ScriptEquals (({ScriptComparison.left=current} op=('>=' | '<=' | '>' | '<') ) right=ScriptEquals)*;

ScriptEquals returns ScriptExpression:
	ScritpAddition (({ScriptEquals.left=current} op=("==" | "!=") ) right=ScritpAddition)*;
 
ScritpAddition returns ScriptExpression:
    ScritpMultiply (({ScriptPlus.left=current} '+' | {ScriptMinus.left=current} '-') right=ScritpMultiply)*; 

ScritpMultiply returns ScriptExpression:
    Substitution (({ScriptTimes.left=current} '*' | {ScriptDiv.left=current} '/') right=Substitution)*;
    
Substitution returns ScriptExpression:
	ScriptPrefixed (({Substitution.left=current} => '<|') right=ScriptPrefixed)*
;

ScriptPrefixed returns ScriptExpression:
    {ScriptBooleanNegation} =>"!" exp=ScriptAtomic | /* right associativity */
    {ScriptArithmeticSigned} =>"-" exp=ScriptAtomic | /* right associativity */
    ScriptAtomic;


ScriptAtomic returns ScriptExpression:
    '(' ScriptExpression ')' 
|   CommonAtomic

|   Signature 
|	Versig 
|	IfThenElse 
|	Min 
|   Max
|   Between
|   Size
|	AfterTimeLock
|	TransactionBody
;


CommonAtomic:
	Literal | Reference | Hash;

Reference: 
	ref=[Referrable|QualifiedName]
	( => "("(actualParams+=Expression ("," actualParams+=Expression)*)?")")?;		// within ScriptExpressions

Literal:
	NumberLiteral 
|	StringLiteral
|	BooleanLiteral
|	HashLiteral
|	KeyLiteral
|	TransactionLiteral;

HashLiteral:
	Hash160Literal
|	Hash256Literal
|	Ripemd160Literal
|	Sha256Literal;

NumberLiteral: value=Number;
StringLiteral: value=STRING;
BooleanLiteral: ^true?='true' | {BooleanLiteral} 'false';
Hash160Literal: value=HASH_160;
Hash256Literal: value=HASH_256;
Ripemd160Literal: value=RIPMED_160;
Sha256Literal: value=SHA_256;
KeyLiteral: value=WIF;
TransactionLiteral: value=(TXSERIAL|TXID);		// TXID is automatically converted into a hex by fetching the transaction from the network

IfThenElse:
	'if' if=ScriptExpression
	"then" then=ScriptAtomic
	'else' else=ScriptAtomic;

Signature: "sig" "(" key=CommonAtomic ")" ("[" modifier=Modifier "]")?;

enum Modifier: 
	AIAO 
|	AISO 
|	AINO
|	SIAO 
|	SISO
|	SINO;
	
Versig:
	"versig" "(" 
		pubkeys+=CommonAtomic ("," pubkeys+=CommonAtomic)* ";"
		signatures+=ScriptExpression ("," signatures+=ScriptExpression)* 
	")";

Hash: Hash160 | Hash256 | Ripemd160 | Sha256;
Hash160: 	'hash160' "(" value=ScriptExpression ")";
Hash256: 	'hash256' "(" value=ScriptExpression ")";
Ripemd160: 	'ripemd160' "(" value=ScriptExpression ")";
Sha256: 	'sha256' "(" value=ScriptExpression ")";

Min: "min" "(" left=ScriptExpression "," right=ScriptExpression ")";
Max: "max" "(" left=ScriptExpression"," right=ScriptExpression ")";
Between: "between" "(" value=ScriptExpression "," left=ScriptExpression":" right=ScriptExpression ")";
Size: "size" "(" value=ScriptExpression ")";
AfterTimeLock: "after" timelock=Time ":" continuation=ScriptAtomic;

DeclarationType returns Type:
	PermittedType;

Type:
	PermittedType 
|   {VoidType} value=VoidTypeEnum
|	{TypeVariable} value=ID;

PermittedType:
	BasicType
|   {KeyType} value=KeyTypeEnum
|   {AddressType} value=AddressTypeEnum
|   {TransactionType} value=TransactionTypeEnum
|   {SignatureType} value=SignatureTypeEnum;

BasicType:
	{IntType} value=IntTypeEnum 
|	{StringType} value=StringTypeEnum 
|   {BooleanType} value=BoolTypeEnum
|	HashType;


HashType:
	{Hash160Type} value=Hash160TypeEnum
|	{Hash256Type} value=Hash256TypeEnum
|	{Ripemd160Type} value=Ripemd160TypeEnum
|	{Sha256Type} value=Sha256TypeEnum;



enum IntTypeEnum: int;
enum StringTypeEnum: string;
enum BoolTypeEnum: bool | boolean;
enum KeyTypeEnum: key;
enum AddressTypeEnum: address;
enum SignatureTypeEnum: signature;
enum TransactionTypeEnum: transaction;
enum Hash160TypeEnum: hash160;
enum Hash256TypeEnum: hash256;
enum Ripemd160TypeEnum: ripemd160;
enum Sha256TypeEnum: sha256;
enum VoidTypeEnum: void;

Typeable:
	Model
| Declaration
| DeclarationLeft
| DeclarationRight
| Parameter
| Constant
| Input
| Output 
| Participant
| ProcessDeclaration
| ProcessReference
| Process
| Prefix
| ProtocolTransactionReference
| ExpressionI
| Regtest
| Instruction
| Compile
;

Number returns ecore::ELong:
	LONG ('.' LONG)? "BTC"?
|	LONG_HEX;

Delay returns ecore::ELong:
	MinutesDelay | HoursDelay | DayDelay | BlockDelay;

MinutesDelay returns ecore::ELong: LONG "minutes";
HoursDelay   returns ecore::ELong: LONG "hours";
DayDelay     returns ecore::ELong: LONG "days";
BlockDelay   returns ecore::ELong: LONG "blocks";

PrivateKey returns ecore::EString: WIF;
Address returns ecore::EString: WIF;

terminal LONG_HEX returns ecore::ELong:
	('0x'|'0X') ('0'..'9'|'a'..'f'|'A'..'F') 
	(('0'..'9'|'a'..'f'|'A'..'F'|'_')* ('0'..'9'|'a'..'f'|'A'..'F') )?;	// java-like hexadecimal number


terminal LONG returns ecore::ELong:
	'0'..'9' (('0'..'9'|'_')* '0'..'9')?  ; 	// java-like integer


terminal WIF: 
	'wif:' ('1'|'2'|'3'|'4'|'5'|'6'|'7'|'8'|'9'|'A'|'B'|'C'|'D'|'E'|'F'|'G'|'H'|'J'|'K'|'L'|'M'|'N'|'P'|'Q'|'R'|'S'|'T'|'U'|'V'|'W'|'X'|'Y'|'Z'|'a'|'b'|'c'|'d'|'e'|'f'|'g'|'h'|'i'|'j'|'k'|'m'|'n'|'o'|'p'|'q'|'r'|'s'|'t'|'u'|'v'|'w'|'x'|'y'|'z')+;

terminal SHA_256 returns ecore::EByteArray:    'sha256:'    ('0'..'9'|'a'..'f'|'A'..'F')+;
terminal RIPMED_160 returns ecore::EByteArray: 'ripemd160:' ('0'..'9'|'a'..'f'|'A'..'F')+;
terminal HASH_256 returns ecore::EByteArray:   'hash256:'   ('0'..'9'|'a'..'f'|'A'..'F')+;
terminal HASH_160 returns ecore::EByteArray:   'hash160:'   ('0'..'9'|'a'..'f'|'A'..'F')+;
terminal TXID returns ecore::EString:      'txid:' ('0'..'9'|'a'..'f'|'A'..'F')+;
terminal TXSERIAL returns ecore::EString:  'tx:'   ('0'..'9'|'a'..'f'|'A'..'F')+;
	
terminal TIMESTAMP returns ecore::ELong: 
	YEAR '-' MONTH '-' DAY	// YYYY-MM-dd
	("T" HOUR ":" MINUTE 					// THH:mm
		(":" SECOND 						// :ss
			(OFFSET_SIGN OFFSET_HOUR ":" OFFSET_MINUTE)?	// +/- HH:mm
		)?
	)?;

terminal YEAR: ('1'..'9')('0'..'9')('0'..'9')('0'..'9');
terminal MONTH: ('0'..'9')('1'..'9');
terminal DAY: ('0'..'9')('1'..'9');	 
terminal HOUR: ('0'..'2')('0'..'9');
terminal MINUTE: ('0'..'5')('0'..'9');
terminal SECOND: ('0'..'5')('0'..'9');
terminal OFFSET_SIGN: "+"|"-";
terminal OFFSET_HOUR: '0'('0'..'9') | '1'('0'..'2');
terminal OFFSET_MINUTE: '0''0' | '3''0';


/*
 * Endpoints contracts
 */
Participant: name=ID '{'
	(process=Process)? & (variables+=Constant | defs+=ProcessDeclaration)*
'}';

ProcessDeclaration: 'process' name=ID ("(" (params+=Parameter ("," params+=Parameter)*)? ")")? '=' process=Process;
ProcessReference: ref=[ProcessDeclaration] ("("(actualParams+=Expression ("," actualParams+=Expression)*)?")")?;

Process:
  SingleChoice 
| ProtocolIfThenElse
| ProcessReference
| '(' Parallel ')'
;

Parallel returns Process:
	Process (({Parallel.left=current} => '|' ) right=Process)*;

Choice:
	actions+=Prefix ('+' actions+=Prefix)*;

SingleChoice returns Choice:
	actions+=Prefix;

NextProcess returns Process:
  SingleChoice
| ProtocolIfThenElse
| ProcessReference
| '(' Process ')'
;

Prefix:	(Ask|Put|Send|Receive|Check|Tau) (';' next=NextProcess)?;

Tau: {Tau} 't';

Ask: "ask" (txRefs+=ProtocolTransactionReference
		|'{'(txRefs+=ProtocolTransactionReference ) (',' txRefs+=ProtocolTransactionReference)* '}') ;
	
Put: 'put' (
	  	txRefs+=ProtocolTransactionReference
		|'{'(txRefs+=ProtocolTransactionReference ) (',' txRefs+=ProtocolTransactionReference)* '}');

Send: 'send' message=Expression 'to' p=[Participant];
Receive: 'receive' var=Parameter 'from' p=[Participant];
Check:	'check' exp=Expression;

ProtocolIfThenElse: 
'if' exp=Expression 
'then' then=NextProcess 
(=> 'else' else=NextProcess)?;

@Override
terminal INT returns ecore::EInt: LONG;

ProtocolTransactionReference:
	txRef=Reference (substitution=TransactionBody)?;

		


Regtest:
	{Regtest} 'regtest' '{'
		intructions+=Instruction*
	'}';

Instruction:
	Assert
|	Confirmations
|	GetBalance
|	IsMined
;

Assert:
	'assert' '(' exp=Expression ')';

Confirmations:
	"confirmations" '(' exp=Expression ')';

GetBalance:
	'balance' '(' exp=Expression ')';

IsMined:
	'isMined' '(' exp=Expression ')';

MineBlocks:
	'mine' n=Number 'blocks';
	
SendTransaction:
	'send' '(' exp=Expression ')';


//Redeems returns ScriptExpression:
//	ScriptPrefixed ("(" inIdx=LONG ")")? (({Redeems.left=current}"|=") right=ScriptPrefixed ("(" outIdx=LONG ")")?)*;
	
	
	
	
Compile:
	{Compile} "compile" txs+=Reference*
;
	