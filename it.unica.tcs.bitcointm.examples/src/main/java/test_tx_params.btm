
package com.example

//let sum(a:int,b:int) = a + b

transaction T {
	input = _   
	output = 2 BTC : fun(a:int) . a==5 
}

transaction T1(x:hash160) {
	input = T: 5
	output = 1 BTC : fun(a:string) . hash160(a)==x  
} 

transaction T2 { 
	input = T1(hash160:47095f5dc6fdd1bfb416cc0f301cf7c1de5a8547): "5"
	output = 0: ""
}
 
transaction T3 {
	input = T1(hash160("5")): "5"  
	output = 0.5 BTC : fun(a) . a==42
}
 
transaction T4(n:string) {
	input = T1(hash160(n)): n
	output = 0.5 BTC : fun(a:int) . a==42
}

transaction T5 {      
	input = [
		T3: 42;
		T4("5"): 42
	]
	output = 0: ""   
}

transaction inTx { 
	input = _ 
	output = 0.5 BTC : fun(a:int) . a==44
}

transaction A1(inTx:transaction) {
	input = inTx: 44
	output = 0.5 BTC : fun(a:int) . a==42
}

transaction A2 {
	input = inTx: 44
	output = 0.5 BTC : fun(a:int) . a==42
}

transaction B {
	input = [
		A1(inTx): 42; 
		A2: 42
	]
	output = 0: ""
}

const var_T:transaction = T1(hash160:47095f5dc6fdd1bfb416cc0f301cf7c1de5a8547)

transaction X(x) {
	input = _
	output = 10 BTC: fun(y:int) . x == y
}

transaction Y(y) {
	input = X(y+1): 3 
	output = 10 BTC: fun(a:int) . a == y
}

compile T
	T1(hash160:47095f5dc6fdd1bfb416cc0f301cf7c1de5a8547) 
	T1(hash160("5"))
//	var_T
	A1(inTx) 
	A2 
	B
 
